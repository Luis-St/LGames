plugins {
	id "java"
	id "org.openjfx.javafxplugin" version "0.0.13"
}

repositories {
	mavenCentral()
	maven {
		url "https://libraries.minecraft.net"
	}
	maven {
		url uri("${projectDir}/maven/repositories")
	}
}

javafx {
	version = "17"
	modules = ["javafx.controls"]
}


dependencies {
	// Modules
	implementation project(":account")
	implementation project(":client")
	implementation project(":fx")
	implementation project(":game")
	implementation project(":ludo")
	implementation project(":server")
	implementation project(":ttt")
	implementation project(":wins4")
	implementation project(":utility")
	// Local
	implementation "org.controlsfx:ControlsFX:${ControlsFX}" // Fx
	implementation "net.luis:LUtils:${LUtils}" // Utility
	implementation "net.luis:LNetCore:${LNetCore}" // Network
	implementation "net.luis:FxUtils:${FxUtils}" // Fx Utility
	// Google
	implementation "com.google.guava:guava:${GoogleGuava}" // Utility
	implementation "com.google.code.gson:gson:${GoogleGson}" // Json
	// Apache
	implementation "org.apache.logging.log4j:log4j-api:${Log4jAPI}" // Logging
	implementation "org.apache.logging.log4j:log4j-core:${Log4jCore}" // Logging
	implementation "org.apache.commons:commons-lang3:${ApacheLang}" // Utility
	implementation "org.apache.commons:commons-email:${ApacheEmail}" // E-Mail
	implementation "commons-codec:commons-codec:${ApacheCodec}" // Cryptic
	// Netty
	implementation "io.netty:netty-all:${Netty}" // Network
	// Other
	implementation "net.sf.jopt-simple:jopt-simple:${SimpleJopt}" // Startup
	implementation "com.mojang:datafixerupper:${MojangCodec}" // Codec/Json helper
	implementation "org.jetbrains:annotations:${JetBrainsAnnotations}" // Annotations
	// Test
	testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.1"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.1"
}

test {
	useJUnitPlatform()
}

tasks.register("runClient", JavaExec) {
	group = "runs"
	getMainClass().set("net.luis.run.Main")
	classpath = sourceSets.main.runtimeClasspath
	enableAssertions = true
	args("--launchTarget", "client", "--debugMode", "true", "--devMode", "true", "--gameDir", file("run/client/"), "--resourceDir", file("assets"), "--language", "de_de", "--accountHost", "localhost", "--accountPort", "8081")
	args("--cachePasswordLocal", "true")
	jvmArgs("--module-path", classpath.asPath, "--add-modules", "javafx.controls")
}

tasks.register("runServer", JavaExec) {
	group = "runs"
	getMainClass().set("net.luis.run.Main")
	classpath = sourceSets.main.runtimeClasspath
	enableAssertions = true
	args("--launchTarget", "server", "--debugMode", "true", "--devMode", "true", "--gameDir", file("run/server/"), "--resourceDir", file("assets"), "--language", "en_us", "--host", "localhost", "--port", "8080")
	args("--admin", "00000000-0000-014b-0000-00000000017d")
	jvmArgs("--module-path", classpath.asPath, "--add-modules", "javafx.controls")
}

tasks.register("runAccount", JavaExec) {
	group = "runs"
	getMainClass().set("net.luis.run.Main")
	classpath = sourceSets.main.runtimeClasspath
	enableAssertions = true
	args("--launchTarget", "account", "--debugMode", "true", "--devMode", "true", "--gameDir", file("run/account/"), "--resourceDir", file("assets"), "--language", "en_us", "--host", "localhost", "--port", "8081")
	jvmArgs("--module-path", classpath.asPath, "--add-modules", "javafx.controls")
}

tasks.register("runTest", JavaExec) {
	group = "test runs"
	getMainClass().set("net.luis.run.Test")
	classpath = sourceSets.main.runtimeClasspath
	enableAssertions = true
	jvmArgs("--module-path", classpath.asPath, "--add-modules", "javafx.controls")
}

tasks.register("runFxTest", JavaExec) {
	group = "test runs"
	getMainClass().set("net.luis.run.FxTest")
	classpath = sourceSets.main.runtimeClasspath
	enableAssertions = true
	jvmArgs("--module-path", classpath.asPath, "--add-modules", "javafx.controls")
}

compileJava {
	options.compilerArgs << "-parameters"
}

jar {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	manifest {
		attributes([
				"Main-Class"   : "net.luis.run.Main"
		])
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}
